{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DragonIK - Universal Inverse Kinematics An IK toolkit solution that dynamically and programmatically alters the pose of your characters during gameplay. DragonIK provides multi-character foot placement, spine placement and a versatile lookat/aim solving for your characters and creatures. It simply works whether your character is a human, dog, snake, dragon or spider. Features Extreme ease and simplicity of its workflow. Get amazing results in as little as 5 minutes! Highly versatile. Works on bipeds,quadrupeds,spiders and snake creatures. The workflow expected is entirely through a few animation blueprints that require minimal tweaking but provides a great freedom of customization. Developed in C++, used through animation blueprints. Highly optmized across platforms. Automatically works under replication. Realtime support and communication through discord. Get help from the dev or other community members if you are stuck! Contact and Support Visit our public discord server for support! DragonIK Discord Server Get it from the marketplace now! View sample project on GitHub (Requires plugin installed) You can also shoot a mail at codehawk64@gmail.com (discord communication is recommended for easier realtime communication) License DragonIK is a copyright trademark of Eternal Monke Games. Its license follows the Marketplace Distribution Agreement set by Epic Games. Marketplace Distribution_license .","title":"Introduction"},{"location":"#dragonik-universal-inverse-kinematics","text":"An IK toolkit solution that dynamically and programmatically alters the pose of your characters during gameplay. DragonIK provides multi-character foot placement, spine placement and a versatile lookat/aim solving for your characters and creatures. It simply works whether your character is a human, dog, snake, dragon or spider.","title":"DragonIK - Universal Inverse Kinematics"},{"location":"#features","text":"Extreme ease and simplicity of its workflow. Get amazing results in as little as 5 minutes! Highly versatile. Works on bipeds,quadrupeds,spiders and snake creatures. The workflow expected is entirely through a few animation blueprints that require minimal tweaking but provides a great freedom of customization. Developed in C++, used through animation blueprints. Highly optmized across platforms. Automatically works under replication. Realtime support and communication through discord. Get help from the dev or other community members if you are stuck!","title":"Features"},{"location":"#contact-and-support","text":"Visit our public discord server for support! DragonIK Discord Server Get it from the marketplace now! View sample project on GitHub (Requires plugin installed) You can also shoot a mail at codehawk64@gmail.com (discord communication is recommended for easier realtime communication)","title":"Contact and Support"},{"location":"#license","text":"DragonIK is a copyright trademark of Eternal Monke Games. Its license follows the Marketplace Distribution Agreement set by Epic Games. Marketplace Distribution_license .","title":"License"},{"location":"GettingStarted/","text":"Getting Started This page explains the pre-requisites and the core principles. Basic Requirements Ensure you have the latest plugin always installed. Unreal plugins do no automatically update, so you need to manually update them through the EpicLauncher. Best rig practices Screenshot shows a perfect example of a good skeleton hierarchy for quadrupeds. The bones from the pelvis till the chest follows in a simple sequential manner. The back legs and tails are children to the pelvis bone. The front legs and neck chains are children to the chest bone. The plugin expects a good linear hierarchy of bones for your character. Parallel bones could cause trouble and difficulty in getting good results. Majority of game oriented skeleton hierarchies will perfectly work with the plugin. Ideal example skeletons being the marketplace animals such as Protofactor & Malbers creatures. All the solvers There exists exactly 3 unique animation blueprints provided by the plugin Dragon Spine Solver : [Spine/Hip manupulation and adjustments on terrains] Dragon Foot Solver : [Foot IK that compliments and works in conjunction with the spine solver] Dragon Aim Look Solver : [Advanced lookat solver that aims a sequence of bones towards a target. Commonly used for fullbody aiming.] Setup and principles involved Latest plugin version is 2.2.5, which exists in 4.24,4.25 and 4.26. Entire process is strictly through animation blueprints. Replication is automatically supported. IK solving is handled through the result of the line traces that fires from the bones of the characters. If bones are setup successfully, these line traces and other widgets can be visualized in the animation blueprint if you click on the solvers. The IK reacts to any object with a collision, and having its corresponding trace channel to \"block\". The solvers by default uses the \"Visibility\" trace channel which is always block by default. The default channels can cause the IK to react to everything. Hence, creating a custom trace channel in the project settings under \"Collision\" is highly recommended for a better and easier workflow. Personal recommendation is to set the new trace channel's default collision response to \"ignore\". Then manually setting the collision of terrains to \"block\". If the IK can be overreaching objects, then it could just be a matter of the trace heights being too long in the solvers. Decreasing and tweaking them will help. Experiment with different trace shapes (Line,Sphere,Box) to see what would be a good fit. There are many parameters one can tweak to acheive the desired results. Tooltips are available as well which can be accessed by hoving your mouse around the parameters.","title":"Getting Started"},{"location":"GettingStarted/#getting-started","text":"This page explains the pre-requisites and the core principles.","title":"Getting Started"},{"location":"GettingStarted/#basic-requirements","text":"Ensure you have the latest plugin always installed. Unreal plugins do no automatically update, so you need to manually update them through the EpicLauncher.","title":"Basic Requirements"},{"location":"GettingStarted/#best-rig-practices","text":"Screenshot shows a perfect example of a good skeleton hierarchy for quadrupeds. The bones from the pelvis till the chest follows in a simple sequential manner. The back legs and tails are children to the pelvis bone. The front legs and neck chains are children to the chest bone. The plugin expects a good linear hierarchy of bones for your character. Parallel bones could cause trouble and difficulty in getting good results. Majority of game oriented skeleton hierarchies will perfectly work with the plugin. Ideal example skeletons being the marketplace animals such as Protofactor & Malbers creatures.","title":"Best rig practices"},{"location":"GettingStarted/#all-the-solvers","text":"There exists exactly 3 unique animation blueprints provided by the plugin Dragon Spine Solver : [Spine/Hip manupulation and adjustments on terrains] Dragon Foot Solver : [Foot IK that compliments and works in conjunction with the spine solver] Dragon Aim Look Solver : [Advanced lookat solver that aims a sequence of bones towards a target. Commonly used for fullbody aiming.]","title":"All the solvers"},{"location":"GettingStarted/#setup-and-principles-involved","text":"Latest plugin version is 2.2.5, which exists in 4.24,4.25 and 4.26. Entire process is strictly through animation blueprints. Replication is automatically supported. IK solving is handled through the result of the line traces that fires from the bones of the characters. If bones are setup successfully, these line traces and other widgets can be visualized in the animation blueprint if you click on the solvers. The IK reacts to any object with a collision, and having its corresponding trace channel to \"block\". The solvers by default uses the \"Visibility\" trace channel which is always block by default. The default channels can cause the IK to react to everything. Hence, creating a custom trace channel in the project settings under \"Collision\" is highly recommended for a better and easier workflow. Personal recommendation is to set the new trace channel's default collision response to \"ignore\". Then manually setting the collision of terrains to \"block\". If the IK can be overreaching objects, then it could just be a matter of the trace heights being too long in the solvers. Decreasing and tweaking them will help. Experiment with different trace shapes (Line,Sphere,Box) to see what would be a good fit. There are many parameters one can tweak to acheive the desired results. Tooltips are available as well which can be accessed by hoving your mouse around the parameters.","title":"Setup and principles involved"},{"location":"Aiming%20IK%20Tutorials/e-aimsolver/","text":"Aim Solver Setup (All Type Generic) A generic aiming IK solver that aims and rotates a sequence of bones towards a target location. Aim IK youtube tutorial Core Setup 1) Find the \"Dragon Aim Look Solver\" blueprint node in the animation graph. 2) Type the \"Start Bone\" (eg:- Head) and \"End Bone\" (eg:- Chest or Pelvis). 3) A transform widget appears in the animation blueprint viewport if setup is valid. Move the widget around to easily test the aiming of the character. 4) Supply a transform variable to the \"LookAt Transform\" transform node. This variable is the target location in world space. Advanced Setup 1) Follow all the steps in the core setup. 2) (optional step)Type the bone names in the \"dragon input data\". Ensure correct bone names are added for pelvis,spine-start and foot bones. This data is used for the feet planting IK when the character is aiming. 3) If hand aiming is needed for cases like \"rifle aiming\" or \"sword swing aiming\", set the hand bones in the hand array. Set the shoulder,elbow and hand bones. 4) Tweak the clamp parameters under the \"Advanced Clamp Settings\". Separate clamp parameters are available for body,head and limbs. 5) \"Max body clamp\" controls the rotation limit of the main body. It works in conjunction with the \"Body Clamp Curve\" curve editor inside the solver. Tweak if needed. 6) The \"Body clamp curve\" is a curve parameter that multiplies with the \"Max body clamp\" parameter, from the end bone (0.0 x-value) to the start bone (1.0 x-value). You can tweak it to have varied clamping for individual bones of the body. 7) Increase or decrease the maximum clamp limits both vertically and horizontally. 8) \"Limb Clamp\" controls how far or how little the arms can follow the target. Tweak it as needed. Higher values are good for gun aiming, and lower values are used for wings suspension when aiming while flying (for birds). 9) If aiming using a handheld weapon such as a gun or a sword but there is an offset in the aim, then tweak \"target aim offset\" as needed. 10) Enable or disable the \"use relative rotation algorithm\" to switch between two type of aiming algorithm. 11) Details for each parameters are provided inside the tooltips. Experimentation is encouraged. Check out the example project in github to see awesome example setup. Useful tips The aim solver can be used also for aiming tails of a character. The setup is the same, but the \"lookat vector\" parameter needs to be inversed. (eg:- If the lookatvector of the character is using the default (0,1,0) then the tail solver need to use (0,-1,0) as the vector input since the tail is facing backwards compared to the rest of the body) Everything learnt here can be directly applied for providing good aim solving for humans,quadrupeds,spiders,snakes and even more varieties of characters.","title":"Aim Solver Setup (Generic)"},{"location":"Aiming%20IK%20Tutorials/e-aimsolver/#aim-solver-setup-all-type-generic","text":"A generic aiming IK solver that aims and rotates a sequence of bones towards a target location.","title":"Aim Solver Setup (All Type Generic)"},{"location":"Aiming%20IK%20Tutorials/e-aimsolver/#aim-ik-youtube-tutorial","text":"","title":"Aim IK youtube tutorial"},{"location":"Aiming%20IK%20Tutorials/e-aimsolver/#core-setup","text":"1) Find the \"Dragon Aim Look Solver\" blueprint node in the animation graph. 2) Type the \"Start Bone\" (eg:- Head) and \"End Bone\" (eg:- Chest or Pelvis). 3) A transform widget appears in the animation blueprint viewport if setup is valid. Move the widget around to easily test the aiming of the character. 4) Supply a transform variable to the \"LookAt Transform\" transform node. This variable is the target location in world space.","title":"Core Setup"},{"location":"Aiming%20IK%20Tutorials/e-aimsolver/#advanced-setup","text":"1) Follow all the steps in the core setup. 2) (optional step)Type the bone names in the \"dragon input data\". Ensure correct bone names are added for pelvis,spine-start and foot bones. This data is used for the feet planting IK when the character is aiming. 3) If hand aiming is needed for cases like \"rifle aiming\" or \"sword swing aiming\", set the hand bones in the hand array. Set the shoulder,elbow and hand bones. 4) Tweak the clamp parameters under the \"Advanced Clamp Settings\". Separate clamp parameters are available for body,head and limbs. 5) \"Max body clamp\" controls the rotation limit of the main body. It works in conjunction with the \"Body Clamp Curve\" curve editor inside the solver. Tweak if needed. 6) The \"Body clamp curve\" is a curve parameter that multiplies with the \"Max body clamp\" parameter, from the end bone (0.0 x-value) to the start bone (1.0 x-value). You can tweak it to have varied clamping for individual bones of the body. 7) Increase or decrease the maximum clamp limits both vertically and horizontally. 8) \"Limb Clamp\" controls how far or how little the arms can follow the target. Tweak it as needed. Higher values are good for gun aiming, and lower values are used for wings suspension when aiming while flying (for birds). 9) If aiming using a handheld weapon such as a gun or a sword but there is an offset in the aim, then tweak \"target aim offset\" as needed. 10) Enable or disable the \"use relative rotation algorithm\" to switch between two type of aiming algorithm. 11) Details for each parameters are provided inside the tooltips. Experimentation is encouraged. Check out the example project in github to see awesome example setup.","title":"Advanced Setup"},{"location":"Aiming%20IK%20Tutorials/e-aimsolver/#useful-tips","text":"The aim solver can be used also for aiming tails of a character. The setup is the same, but the \"lookat vector\" parameter needs to be inversed. (eg:- If the lookatvector of the character is using the default (0,1,0) then the tail solver need to use (0,-1,0) as the vector input since the tail is facing backwards compared to the rest of the body) Everything learnt here can be directly applied for providing good aim solving for humans,quadrupeds,spiders,snakes and even more varieties of characters.","title":"Useful tips"},{"location":"Foot%20placement%20IK%20Tutorials/Terrain_Solving/","text":"Introduction to terrain and foot placement IK solving Foot placement IK is the ability of the animated character to make the body and legs block any blocking terrain and adjust the entire pose programatically, in a natural and believable manner. Normally one will need to make use of Unreal's default solvers such as the two-bone IK and FABRIK solvers to get foot placement, but it is often a very tedious process that rarely gives best results without diving into C++. DragonIK got you covered, as the plugin provides a quick,efficient and painless way to bring foot placement ability to majority of your characters. Whether it is humans,quadrupeds,spiders or even snakes, the plugin makes it possible. Keep your character blueprints clean, and get powerful foot placement IK working with just 2 animation blueprint nodes.","title":"About terrain IK solving"},{"location":"Foot%20placement%20IK%20Tutorials/Terrain_Solving/#introduction-to-terrain-and-foot-placement-ik-solving","text":"Foot placement IK is the ability of the animated character to make the body and legs block any blocking terrain and adjust the entire pose programatically, in a natural and believable manner. Normally one will need to make use of Unreal's default solvers such as the two-bone IK and FABRIK solvers to get foot placement, but it is often a very tedious process that rarely gives best results without diving into C++. DragonIK got you covered, as the plugin provides a quick,efficient and painless way to bring foot placement ability to majority of your characters. Whether it is humans,quadrupeds,spiders or even snakes, the plugin makes it possible. Keep your character blueprints clean, and get powerful foot placement IK working with just 2 animation blueprint nodes.","title":"Introduction to terrain and foot placement IK solving"},{"location":"Foot%20placement%20IK%20Tutorials/1.%20Humans/a-bipeds/","text":"Bipedal foot placement Setup Applicable for humans & 2-legged creatures like chickens and raptors. Advanced 3-part youtube tutorials The human IK tutorial is split into 3 super-short videos. Part-1 Human IK core setup Part-2 Fine tuning and tweaking Part-3 Collision handling and handling trace channels Basic setup through screenshots","title":"Human/Biped foot placement Setup"},{"location":"Foot%20placement%20IK%20Tutorials/1.%20Humans/a-bipeds/#bipedal-foot-placement-setup","text":"Applicable for humans & 2-legged creatures like chickens and raptors.","title":"Bipedal foot placement Setup"},{"location":"Foot%20placement%20IK%20Tutorials/1.%20Humans/a-bipeds/#advanced-3-part-youtube-tutorials","text":"The human IK tutorial is split into 3 super-short videos.","title":"Advanced 3-part youtube tutorials"},{"location":"Foot%20placement%20IK%20Tutorials/1.%20Humans/a-bipeds/#part-1-human-ik-core-setup","text":"","title":"Part-1 Human IK core setup"},{"location":"Foot%20placement%20IK%20Tutorials/1.%20Humans/a-bipeds/#part-2-fine-tuning-and-tweaking","text":"","title":"Part-2 Fine tuning and tweaking"},{"location":"Foot%20placement%20IK%20Tutorials/1.%20Humans/a-bipeds/#part-3-collision-handling-and-handling-trace-channels","text":"","title":"Part-3 Collision handling and handling trace channels"},{"location":"Foot%20placement%20IK%20Tutorials/1.%20Humans/a-bipeds/#basic-setup-through-screenshots","text":"","title":"Basic setup through screenshots"},{"location":"Foot%20placement%20IK%20Tutorials/2.%20Quadrupeds/b-quadrupeds/","text":"Animals/Quadrupeds foot placement Setup Applicable for quadrupeds like dogs,deers and dragons. Also applicable for creatures with more than 4 legs but having streamlined bodies such as scorpions. Advanced Youtube tutorials Quadruped IK tutorial for a good normal rig Quadruped IK tutorial for a slightly challenging rig Basic setup through screenshots","title":"Animals/Quadrupeds foot placement Setup"},{"location":"Foot%20placement%20IK%20Tutorials/2.%20Quadrupeds/b-quadrupeds/#animalsquadrupeds-foot-placement-setup","text":"Applicable for quadrupeds like dogs,deers and dragons. Also applicable for creatures with more than 4 legs but having streamlined bodies such as scorpions.","title":"Animals/Quadrupeds foot placement Setup"},{"location":"Foot%20placement%20IK%20Tutorials/2.%20Quadrupeds/b-quadrupeds/#advanced-youtube-tutorials","text":"","title":"Advanced Youtube tutorials"},{"location":"Foot%20placement%20IK%20Tutorials/2.%20Quadrupeds/b-quadrupeds/#quadruped-ik-tutorial-for-a-good-normal-rig","text":"","title":"Quadruped IK tutorial for a good normal rig"},{"location":"Foot%20placement%20IK%20Tutorials/2.%20Quadrupeds/b-quadrupeds/#quadruped-ik-tutorial-for-a-slightly-challenging-rig","text":"","title":"Quadruped IK tutorial for a slightly challenging rig"},{"location":"Foot%20placement%20IK%20Tutorials/2.%20Quadrupeds/b-quadrupeds/#basic-setup-through-screenshots","text":"","title":"Basic setup through screenshots"},{"location":"Foot%20placement%20IK%20Tutorials/3.%20Spiders/c-spider/","text":"Spider foot placement setup Applicable for spider type creatures. Advanced youtube tutorial Basic setup through screenshots Lower maximum dip height works better for spiders (usually). Enable \"alternate cross based rotation\" to use the cross-shaped 4 trace lines to determine the rotation of the pelvis during slopes. The 4 trace lines uses the alternate trace radius for spacing. Tweak the rotation intensities for the right results. Copy/Paste the \"dragon input data\" from the spine solver to foot solver . Increase \"trace height below\" so legs can reach the ground more prematurely. Useful to have it a higher value when idle, and a lower value when in locomotion.","title":"Spider foot placement setup"},{"location":"Foot%20placement%20IK%20Tutorials/3.%20Spiders/c-spider/#spider-foot-placement-setup","text":"Applicable for spider type creatures.","title":"Spider foot placement setup"},{"location":"Foot%20placement%20IK%20Tutorials/3.%20Spiders/c-spider/#advanced-youtube-tutorial","text":"","title":"Advanced youtube tutorial"},{"location":"Foot%20placement%20IK%20Tutorials/3.%20Spiders/c-spider/#basic-setup-through-screenshots","text":"Lower maximum dip height works better for spiders (usually). Enable \"alternate cross based rotation\" to use the cross-shaped 4 trace lines to determine the rotation of the pelvis during slopes. The 4 trace lines uses the alternate trace radius for spacing. Tweak the rotation intensities for the right results. Copy/Paste the \"dragon input data\" from the spine solver to foot solver . Increase \"trace height below\" so legs can reach the ground more prematurely. Useful to have it a higher value when idle, and a lower value when in locomotion.","title":"Basic setup through screenshots"},{"location":"Foot%20placement%20IK%20Tutorials/4.%20Snakes/d-snake/","text":"Advanced youtube tutorial Snakes/Worms foot placement Setup Snakes are unique as they don't require the foot solver. Only uses the spine solver. 1) Type the pelvis and spine-start bone inside the \"dragon input data\". Keep the feet array empty. 1) In spine solver, increase the line trace height (above and below) value comfortably high. 2) Enable \"forced activation\" (optional) or tweak the values of parameters such as \"Maximum feet-terrain fail distance\" and \"Minimum terrain-capsule activation distance\". Forced activation will provide constant stable result, but snake will be stuck completely to the ground, unable to jump. 3) Enable \"is snake ?\" boolean. Without this, SnakeIK will not work.","title":"Snakes/Worms foot placement Setup"},{"location":"Foot%20placement%20IK%20Tutorials/4.%20Snakes/d-snake/#advanced-youtube-tutorial","text":"","title":"Advanced youtube tutorial"},{"location":"Foot%20placement%20IK%20Tutorials/4.%20Snakes/d-snake/#snakesworms-foot-placement-setup","text":"Snakes are unique as they don't require the foot solver. Only uses the spine solver. 1) Type the pelvis and spine-start bone inside the \"dragon input data\". Keep the feet array empty. 1) In spine solver, increase the line trace height (above and below) value comfortably high. 2) Enable \"forced activation\" (optional) or tweak the values of parameters such as \"Maximum feet-terrain fail distance\" and \"Minimum terrain-capsule activation distance\". Forced activation will provide constant stable result, but snake will be stuck completely to the ground, unable to jump. 3) Enable \"is snake ?\" boolean. Without this, SnakeIK will not work.","title":"Snakes/Worms foot placement Setup"},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/","text":"Commonly encountered problems and their solutions IK not working ? Check if the red lines and other widgets are rendering if you click on any of the solvers. If nothing is rendered, then the IK failed to activate. The IK won't activate if any of the bones are typed wrong. Also ensure pelvis and spine-start are typed correctly, as bad order will also cause the IK to fail. IK feels like it is \"turning off\" on extreme slopes ? Increase the \"trace height upwards\" and \"trace height downwards\" in the spine solver. If that doesn't help, also increase the \"Maximum feet-terrain fail distance\" as well as the \"Minimum terrain capsule activation distance\". Feets floating in the air ? Decrease the \"Trace Height Upwards\" in the feet solver. IK reacting to too many objects in a level, including objects you don't want to react to ? Use a custom trace channel to selectively ignore objects in the level. Create a new trace channel called \"ik_channel\" in the project settings under collision. Set it \"ignore\" by default instead of \"block\". Replace the visibility channel used by the spine solvers and foot solvers. Set your terrain meshe's \"ik_channel\" response to block. Set objects you want the IK to ignore to \"ignore\". Body bones rotating too much or too less ? Tweak the \"forward rotation intensity\" and \"sideward rotation intensity\" for both the pelvis and chest in the spine solver. It is a multiplier value. Feets not rotating properly when on slopes and/or when doing actions such as crouching ? Ensure to connect a cached copy of the original pose (the pose data before it goes through the spine solver) into the foot solver's \"(optional) Ref pose for feet rotation on slopes\" Feets are shaking or reacting too quickly towards the terrain. Decrease or tweak the \"shift speed\" as well as the interpolation parameters such as \"location lerp speed\" and \"rotation lerp speed\" Leg knees are bending in undesirable directions ? The direction of the knee bending is calculated based on the existing bends of the legs of the animation. This ensure the knee bending is perfectly natural and in-tune with the animation. If by any chance the knees are bending in an awkward direction, the animation of the legs might need to be tweaked either in the animation software, or just directly in unreal using the personna editor. Alternatively, you can also tweak the position of the blue pole widgets in the animation blueprint viewport. The knee bending will have an extra bias in the same direction of the blue pole widgets. You can directly type the data inside the feet array's \"knee direction offset\" parameter instead of grabbing the balls. IK struggling in closed spaces like small rooms in an apartment or caves ? Use the anti-channel functionality. Enable it in both the spine solver and foot solver. Create a new channel and call it \"anti_channel\" or anything comfortable with. Make sure the anti-channel's channel response is ignore by default in project settings. Objects with this anti-channel trace channel's response to \"block\" will repel the traces used for solving calculation. You can use meshes with the anti-channel to cover ceilings and under stairs for a customized workflow experience.","title":"Common problems & solutions related to foot placement IK"},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/#commonly-encountered-problems-and-their-solutions","text":"","title":"Commonly encountered problems and their solutions"},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/#ik-not-working","text":"Check if the red lines and other widgets are rendering if you click on any of the solvers. If nothing is rendered, then the IK failed to activate. The IK won't activate if any of the bones are typed wrong. Also ensure pelvis and spine-start are typed correctly, as bad order will also cause the IK to fail.","title":"IK not working ?"},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/#ik-feels-like-it-is-turning-off-on-extreme-slopes","text":"Increase the \"trace height upwards\" and \"trace height downwards\" in the spine solver. If that doesn't help, also increase the \"Maximum feet-terrain fail distance\" as well as the \"Minimum terrain capsule activation distance\".","title":"IK feels like it is \"turning off\" on extreme slopes ?"},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/#feets-floating-in-the-air","text":"Decrease the \"Trace Height Upwards\" in the feet solver.","title":"Feets floating in the air ?"},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/#ik-reacting-to-too-many-objects-in-a-level-including-objects-you-dont-want-to-react-to","text":"Use a custom trace channel to selectively ignore objects in the level. Create a new trace channel called \"ik_channel\" in the project settings under collision. Set it \"ignore\" by default instead of \"block\". Replace the visibility channel used by the spine solvers and foot solvers. Set your terrain meshe's \"ik_channel\" response to block. Set objects you want the IK to ignore to \"ignore\".","title":"IK reacting to too many objects in a level, including objects you don't want to react to ?"},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/#body-bones-rotating-too-much-or-too-less","text":"Tweak the \"forward rotation intensity\" and \"sideward rotation intensity\" for both the pelvis and chest in the spine solver. It is a multiplier value.","title":"Body bones rotating too much or too less ?"},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/#feets-not-rotating-properly-when-on-slopes-andor-when-doing-actions-such-as-crouching","text":"Ensure to connect a cached copy of the original pose (the pose data before it goes through the spine solver) into the foot solver's \"(optional) Ref pose for feet rotation on slopes\"","title":"Feets not rotating properly when on slopes and/or when doing actions such as crouching ?"},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/#feets-are-shaking-or-reacting-too-quickly-towards-the-terrain","text":"Decrease or tweak the \"shift speed\" as well as the interpolation parameters such as \"location lerp speed\" and \"rotation lerp speed\"","title":"Feets are shaking or reacting too quickly towards the terrain."},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/#leg-knees-are-bending-in-undesirable-directions","text":"The direction of the knee bending is calculated based on the existing bends of the legs of the animation. This ensure the knee bending is perfectly natural and in-tune with the animation. If by any chance the knees are bending in an awkward direction, the animation of the legs might need to be tweaked either in the animation software, or just directly in unreal using the personna editor. Alternatively, you can also tweak the position of the blue pole widgets in the animation blueprint viewport. The knee bending will have an extra bias in the same direction of the blue pole widgets. You can directly type the data inside the feet array's \"knee direction offset\" parameter instead of grabbing the balls.","title":"Leg knees are bending in undesirable directions ?"},{"location":"Foot%20placement%20IK%20Tutorials/FAQ/f-common_problems/#ik-struggling-in-closed-spaces-like-small-rooms-in-an-apartment-or-caves","text":"Use the anti-channel functionality. Enable it in both the spine solver and foot solver. Create a new channel and call it \"anti_channel\" or anything comfortable with. Make sure the anti-channel's channel response is ignore by default in project settings. Objects with this anti-channel trace channel's response to \"block\" will repel the traces used for solving calculation. You can use meshes with the anti-channel to cover ceilings and under stairs for a customized workflow experience.","title":"IK struggling in closed spaces like small rooms in an apartment or caves ?"},{"location":"IK%20Solvers%20Info/aimsolver/","text":"Dragon Aim Look Solver This is a very powerful and versatile solver that handles everything related to full body aiming. Whether it is for quadrupeds, gun aiming or even 3-point VR solving. Table Core input data This is the most important input data to supply for the aim solver to work. Everything else in the solver are optional according to individual use case. Parameter Description Start Bone (Eg:- Head) The head bone. End Bone The last bone to be influenced. (Eg:- Pelvis or chest) LookAtLocation Target location transform in world space Optional Input Data These are the optional inputs, such as the leg and arm data. The leg data is used for reverse IK of the feets when the body is aiming. The hand input is needed for the arm aiming/reaching logic. Parameter Description Dragon Input Data (optional) Type the input bones used by the solver - pelvis,spine-start and feets. Any wrong bone typing mistake can cause the solver to fail. Hands Input (optional) The hand inputs. Used for seperate clamping and restricting of limb movements during body aiming. Uses : Weapon aiming, hand restriction while extreme body bending, wings stability etc Main Arm Index Reaching & Separate Arm Aim This section only handles the optional logic of multi-arm aiming and reaching. If you desire dual gun aiming or even 3-point VR arm solving, then this section is your friend. Parameter Description Overrided arm aim target transform array Separate aim targets array for hands. Break this parameter after exposing to expose the array for dynamic modification. Hand aiming/reaching use the overrided target transform array ? If enabled, the overrided arm aim target array is used for the hand aiming. Hand rotations use the overrided target transforms ? If enabled, the arm rotation is mirrored by the target transform's rotation. Allow hand stretching ? If enabled, the arms can stretch beyond its original bone length constraints. Reach instead of aiming ? (Only for arms) Switching between arm aiming and reaching. Reaching is great when dynamically picking objects of holding something. Enable this for VR IK arms. Make hands positions influence body ? (If using multi-arm aiming) If enabled, the body rotation is influenced by the arm target locations. Only if reaching mode is enabled. Should arm twist when hand rotates ? (If reaching mode) You can completely ignore arm twisting and just twist the hands alone. Arm pole system method Select the pole system for the arms. Only used if reaching mode is used. Arm twist axis technique Choose the axis of your arm twisting. Only used if reaching mode is used. Hand rotation method Decide if the hand rotation is additively calculated or directly replaced by the hand transforms. Override head rotation to use the look transform rotation ? If this is enabled, then the head rotation uses the rotation of the look target transform instead of aiming at the target. It can be used to set the VR hmd rotation into the head bone, to get the head rotation in all angles. Enable arm interpolation ? Enable this for getting arms to interpolate instead of snapping to location. Arm interpolation is different from the other interpolation parameter. Arm interpolation speed It's the speed of the arm interpolation. Advanced Clamping Settings All your core clamping parameters are held here. Whether it is for the head,body,arms or even the overall max-min clamp of everything. Parameter Description Max Body Lookat Clamp The maximum allowed body chain rotation. Uses the body clamp curve as a multiplier for the final result. Inner Body Lookat Treshold This is a treshold angle limit for the body aiming. If the angles cross this treshold, then the bones will start the aiming process. Head Max Clamp Maximum separate limbs clamp. Can be used to shrink the angle or extend the angle with respect to the body clamp. Ignored if seperate head clamp bool is disabled. Limbs Max Clamp Maximum separate limbs clamp. Can be used to shrink the max angle or extend the max angle with respect to the body clamp. Max Vertical Angle Range (Degrees) Max global vertical rotation clamp. Beyond these clamps, the aiming reverses. Max Horizontal Angle Range (Degrees) Max global horizontal rotation clamp. Beyond these clamps, the aiming reverses. Multiplier Settings These are multiplier parameters that helps fine-tune the body dipping logic in various scenarios. Parameter Description Downward translation when aiming upwards (Multiplier) The extra dip downwards if character is looking vertically upwards. Downward translation when aiming downwards The extra dip downwards if character is looking vertically downwards. Vertical Dip Treshold This is the \"gap\" until the body starts to dip when aiming downwards. Sideward translation when aiming sideways (Multiplier) The extra offset of the root bone in left/right if character's end bone is rotating towards the same direction. Downward translation when aiming sideways (Multiplier) The extra offset of the root bone in left/right if character's root bone is rotate towards the same direction. Vertical aim clamp ratio for body Tweak this if you want the clamp intensity to be different in the vertical axis. It is a multiplier ratio, and clamp is relative to existing setup. 0 = Absolutley no vertical body bending/aiming. 1 = Full Vertical body bending/aiming. Only applies to body chain. Ignores arms and head. Curve Input Settings There are the curve parameters that work in tangent with other parameters. Parameter Description Bone Clamp Curve Curve clamp used to tweak the body bending limits. Works as a multiplier and is part of the total solving calculation. 0th value in X-axis denotes the clamp intensity of the end bone (eg:- if max body clamp is 100, and the 0th value is 0.1, then the final clamp of pelvis/end bone is 10). All values until the 1st value in the X-axis are multipliers for all the bone chains from End to Start bones. Exact 1st X-axis value is ignored, as the head clamp is solely determined by the separate head clamp parameter. Body Rotation Multiplier Curve Curve multiplier to tweak the rotation multiplier in the body chain. Default set to 1 always. No need for modification in most cases. Toggle Settings Parameter Description Should feets be locked using IK ? Lock legs to its original position using IK as the body moves and rotates. Only works with valid dragon input data. Ignore Elbow Compression Only rotate the shoulder towards the target, and ignore the wrist and elbow in the solving. Ignore Seperate Hand solving Turn off separate limbs aiming. Use Relative Rotation Algorithm ? Switch between two different rotation algorithm for different type of results. [enabled] = Relative rotation algorithm provides greater degree of freedom of movement and stable poses. Favours pose stability over accuracy. [disabled] = Non-Relative rotation algorthm provides a more direct and natural aiming but with limit in the range of motion. Favours accuracy over pose stability. Use Separate independent clamping for head ? If enabled, the heads clamp is determined by the separate max head clamp parameter. If disabled, the head clamp is determined by the value in the clamp curve graph along with the rest of the body. Also influenced by max body clamp parameter.If using the aim solver for tails, keep this disabled. Head use exact accurate aiming ? If enabled, head aims exactly at the target regardless of the rest of the body chain. If disabled, head aims while adjusting itself with respect to the rest of the body chain. Can result in a bit more stable but offseted aiming. Enable Solver Toggle this parameter to instantly turn on/off ik. Automatic Foot-Knee-Thigh detection Parameter to choose between automatic feet bone detection or manual method. If enabled, solvers only uses the feet bones, and automatically assumes the next 2 parent bones as knees and thighs. If disabled, solvers uses the feet bones, knee bones and thigh bones typed in the feet array. If disabled, all bones need to be valid. Any invalid bones will not activate the ik. Very useful to keep it disabled on DAZ rigs and certain animal characters, where the thigh-knee-foot are not in a straight linear hierarchy. Work outside gameplay (For sequencer) Enable this to make the solvers calcualte everytime, even during non-gameplay scenarios. Such as sequencer recording sessions. Tail Terrain Settings This is a special section that makes the bone chain to adapt to the terrain. It can be used for long necks of a dragon, or even long tails of a character. A single trace line is fired for the terrain solving calculation if using these features. Parameter Description Is it a terrain addaptive chain ? (like tails) Enable this to turn this solver into an automatic terrain adaptive chain. The lookatlocation parameter is disabled here, in favour of the debuglooklocation as the base reference of the height. The viewport look widget will be used as reference for the in-game terrain adaption. TAC Collision channel Trace channel used by the solver traces. Recommended to create a new dedicated trace channel for the ik through project settings. Trace Up Height This is the upward height of the trace from the lookat widget. Trace Down Height This is the downward height of the trace from the lookat widget. Interpolation Settings Parameter Description Interpolation Type Select the type of interpolation method. Enable Interpolation A boolean to enable/disable overall interpolation. Arms interpolation is independent. Interpolation Speed Speed of solving interpolation. Toggle Interpolation Speed Speed of interpolation between toggling the on/off state of the aim IK. Look At Settings All the forward and upward axis of the character can be defined here. Tweak according to the general direction the character faces in component space. Parameter Description Forward Axis The forward direction axis of the character. Characters using the standard unreal directions use the default value. Upward Axis The up direction axis of the character. Characters using the standard unreal directions use the default (0,0,1) value. Target Offset (only for limbs) Useful for tweaking the aiming offset of arms/limbs. Popular use is for weapons aiming and accuracy. Offset works in component space. Use Reference Forward Axis Logic ? If using mocap or any use case that involves altering the forward axis during gameplay, this can be enabled to dynamically alter the arm and leg poles along with the along with the change in axis. The forward axis is compared with the reference forward axis to calculate the offset of the poles. If they are the same, then nothing happens. Reference Forward Axis This parameter is mainly useful when using mocap animations that involves the character rotating its root bone in multiple directions. It is the default forward vector of your character in component space. The forward vector is compared with the reference forward vector to appropriately alter the knee poles and elbow poles and correcting them. If your character is setup in standard unreal forward axis, then there is no need to alter this. Debugging Only There are mainly used for debugging purposes, such as the widget locations. Parameter Description Debug Look at Location Used for internal animation blueprint viewport for debugging. Real gameworld uses \"LookAtLocation\".If Tail Terrain Adaptive mode is enabled, then this is turned into a constant height reference point from which the line trace is fired. Debug Hand Locations Used for internal animation blueprint viewport debugging when using separate arms aiming/reaching. This does not influence the game world arm transforms","title":"Dragon Aim Look Solver"},{"location":"IK%20Solvers%20Info/aimsolver/#dragon-aim-look-solver","text":"This is a very powerful and versatile solver that handles everything related to full body aiming. Whether it is for quadrupeds, gun aiming or even 3-point VR solving.","title":"Dragon Aim Look Solver"},{"location":"IK%20Solvers%20Info/aimsolver/#table","text":"","title":"Table"},{"location":"IK%20Solvers%20Info/aimsolver/#core-input-data","text":"This is the most important input data to supply for the aim solver to work. Everything else in the solver are optional according to individual use case. Parameter Description Start Bone (Eg:- Head) The head bone. End Bone The last bone to be influenced. (Eg:- Pelvis or chest) LookAtLocation Target location transform in world space","title":"Core input data"},{"location":"IK%20Solvers%20Info/aimsolver/#optional-input-data","text":"These are the optional inputs, such as the leg and arm data. The leg data is used for reverse IK of the feets when the body is aiming. The hand input is needed for the arm aiming/reaching logic. Parameter Description Dragon Input Data (optional) Type the input bones used by the solver - pelvis,spine-start and feets. Any wrong bone typing mistake can cause the solver to fail. Hands Input (optional) The hand inputs. Used for seperate clamping and restricting of limb movements during body aiming. Uses : Weapon aiming, hand restriction while extreme body bending, wings stability etc Main Arm Index","title":"Optional Input Data"},{"location":"IK%20Solvers%20Info/aimsolver/#reaching-separate-arm-aim","text":"This section only handles the optional logic of multi-arm aiming and reaching. If you desire dual gun aiming or even 3-point VR arm solving, then this section is your friend. Parameter Description Overrided arm aim target transform array Separate aim targets array for hands. Break this parameter after exposing to expose the array for dynamic modification. Hand aiming/reaching use the overrided target transform array ? If enabled, the overrided arm aim target array is used for the hand aiming. Hand rotations use the overrided target transforms ? If enabled, the arm rotation is mirrored by the target transform's rotation. Allow hand stretching ? If enabled, the arms can stretch beyond its original bone length constraints. Reach instead of aiming ? (Only for arms) Switching between arm aiming and reaching. Reaching is great when dynamically picking objects of holding something. Enable this for VR IK arms. Make hands positions influence body ? (If using multi-arm aiming) If enabled, the body rotation is influenced by the arm target locations. Only if reaching mode is enabled. Should arm twist when hand rotates ? (If reaching mode) You can completely ignore arm twisting and just twist the hands alone. Arm pole system method Select the pole system for the arms. Only used if reaching mode is used. Arm twist axis technique Choose the axis of your arm twisting. Only used if reaching mode is used. Hand rotation method Decide if the hand rotation is additively calculated or directly replaced by the hand transforms. Override head rotation to use the look transform rotation ? If this is enabled, then the head rotation uses the rotation of the look target transform instead of aiming at the target. It can be used to set the VR hmd rotation into the head bone, to get the head rotation in all angles. Enable arm interpolation ? Enable this for getting arms to interpolate instead of snapping to location. Arm interpolation is different from the other interpolation parameter. Arm interpolation speed It's the speed of the arm interpolation.","title":"Reaching &amp; Separate Arm Aim"},{"location":"IK%20Solvers%20Info/aimsolver/#advanced-clamping-settings","text":"All your core clamping parameters are held here. Whether it is for the head,body,arms or even the overall max-min clamp of everything. Parameter Description Max Body Lookat Clamp The maximum allowed body chain rotation. Uses the body clamp curve as a multiplier for the final result. Inner Body Lookat Treshold This is a treshold angle limit for the body aiming. If the angles cross this treshold, then the bones will start the aiming process. Head Max Clamp Maximum separate limbs clamp. Can be used to shrink the angle or extend the angle with respect to the body clamp. Ignored if seperate head clamp bool is disabled. Limbs Max Clamp Maximum separate limbs clamp. Can be used to shrink the max angle or extend the max angle with respect to the body clamp. Max Vertical Angle Range (Degrees) Max global vertical rotation clamp. Beyond these clamps, the aiming reverses. Max Horizontal Angle Range (Degrees) Max global horizontal rotation clamp. Beyond these clamps, the aiming reverses.","title":"Advanced Clamping Settings"},{"location":"IK%20Solvers%20Info/aimsolver/#multiplier-settings","text":"These are multiplier parameters that helps fine-tune the body dipping logic in various scenarios. Parameter Description Downward translation when aiming upwards (Multiplier) The extra dip downwards if character is looking vertically upwards. Downward translation when aiming downwards The extra dip downwards if character is looking vertically downwards. Vertical Dip Treshold This is the \"gap\" until the body starts to dip when aiming downwards. Sideward translation when aiming sideways (Multiplier) The extra offset of the root bone in left/right if character's end bone is rotating towards the same direction. Downward translation when aiming sideways (Multiplier) The extra offset of the root bone in left/right if character's root bone is rotate towards the same direction. Vertical aim clamp ratio for body Tweak this if you want the clamp intensity to be different in the vertical axis. It is a multiplier ratio, and clamp is relative to existing setup. 0 = Absolutley no vertical body bending/aiming. 1 = Full Vertical body bending/aiming. Only applies to body chain. Ignores arms and head.","title":"Multiplier Settings"},{"location":"IK%20Solvers%20Info/aimsolver/#curve-input-settings","text":"There are the curve parameters that work in tangent with other parameters. Parameter Description Bone Clamp Curve Curve clamp used to tweak the body bending limits. Works as a multiplier and is part of the total solving calculation. 0th value in X-axis denotes the clamp intensity of the end bone (eg:- if max body clamp is 100, and the 0th value is 0.1, then the final clamp of pelvis/end bone is 10). All values until the 1st value in the X-axis are multipliers for all the bone chains from End to Start bones. Exact 1st X-axis value is ignored, as the head clamp is solely determined by the separate head clamp parameter. Body Rotation Multiplier Curve Curve multiplier to tweak the rotation multiplier in the body chain. Default set to 1 always. No need for modification in most cases.","title":"Curve Input Settings"},{"location":"IK%20Solvers%20Info/aimsolver/#toggle-settings","text":"Parameter Description Should feets be locked using IK ? Lock legs to its original position using IK as the body moves and rotates. Only works with valid dragon input data. Ignore Elbow Compression Only rotate the shoulder towards the target, and ignore the wrist and elbow in the solving. Ignore Seperate Hand solving Turn off separate limbs aiming. Use Relative Rotation Algorithm ? Switch between two different rotation algorithm for different type of results. [enabled] = Relative rotation algorithm provides greater degree of freedom of movement and stable poses. Favours pose stability over accuracy. [disabled] = Non-Relative rotation algorthm provides a more direct and natural aiming but with limit in the range of motion. Favours accuracy over pose stability. Use Separate independent clamping for head ? If enabled, the heads clamp is determined by the separate max head clamp parameter. If disabled, the head clamp is determined by the value in the clamp curve graph along with the rest of the body. Also influenced by max body clamp parameter.If using the aim solver for tails, keep this disabled. Head use exact accurate aiming ? If enabled, head aims exactly at the target regardless of the rest of the body chain. If disabled, head aims while adjusting itself with respect to the rest of the body chain. Can result in a bit more stable but offseted aiming. Enable Solver Toggle this parameter to instantly turn on/off ik. Automatic Foot-Knee-Thigh detection Parameter to choose between automatic feet bone detection or manual method. If enabled, solvers only uses the feet bones, and automatically assumes the next 2 parent bones as knees and thighs. If disabled, solvers uses the feet bones, knee bones and thigh bones typed in the feet array. If disabled, all bones need to be valid. Any invalid bones will not activate the ik. Very useful to keep it disabled on DAZ rigs and certain animal characters, where the thigh-knee-foot are not in a straight linear hierarchy. Work outside gameplay (For sequencer) Enable this to make the solvers calcualte everytime, even during non-gameplay scenarios. Such as sequencer recording sessions.","title":"Toggle Settings"},{"location":"IK%20Solvers%20Info/aimsolver/#tail-terrain-settings","text":"This is a special section that makes the bone chain to adapt to the terrain. It can be used for long necks of a dragon, or even long tails of a character. A single trace line is fired for the terrain solving calculation if using these features. Parameter Description Is it a terrain addaptive chain ? (like tails) Enable this to turn this solver into an automatic terrain adaptive chain. The lookatlocation parameter is disabled here, in favour of the debuglooklocation as the base reference of the height. The viewport look widget will be used as reference for the in-game terrain adaption. TAC Collision channel Trace channel used by the solver traces. Recommended to create a new dedicated trace channel for the ik through project settings. Trace Up Height This is the upward height of the trace from the lookat widget. Trace Down Height This is the downward height of the trace from the lookat widget.","title":"Tail Terrain Settings"},{"location":"IK%20Solvers%20Info/aimsolver/#interpolation-settings","text":"Parameter Description Interpolation Type Select the type of interpolation method. Enable Interpolation A boolean to enable/disable overall interpolation. Arms interpolation is independent. Interpolation Speed Speed of solving interpolation. Toggle Interpolation Speed Speed of interpolation between toggling the on/off state of the aim IK.","title":"Interpolation Settings"},{"location":"IK%20Solvers%20Info/aimsolver/#look-at-settings","text":"All the forward and upward axis of the character can be defined here. Tweak according to the general direction the character faces in component space. Parameter Description Forward Axis The forward direction axis of the character. Characters using the standard unreal directions use the default value. Upward Axis The up direction axis of the character. Characters using the standard unreal directions use the default (0,0,1) value. Target Offset (only for limbs) Useful for tweaking the aiming offset of arms/limbs. Popular use is for weapons aiming and accuracy. Offset works in component space. Use Reference Forward Axis Logic ? If using mocap or any use case that involves altering the forward axis during gameplay, this can be enabled to dynamically alter the arm and leg poles along with the along with the change in axis. The forward axis is compared with the reference forward axis to calculate the offset of the poles. If they are the same, then nothing happens. Reference Forward Axis This parameter is mainly useful when using mocap animations that involves the character rotating its root bone in multiple directions. It is the default forward vector of your character in component space. The forward vector is compared with the reference forward vector to appropriately alter the knee poles and elbow poles and correcting them. If your character is setup in standard unreal forward axis, then there is no need to alter this.","title":"Look At Settings"},{"location":"IK%20Solvers%20Info/aimsolver/#debugging-only","text":"There are mainly used for debugging purposes, such as the widget locations. Parameter Description Debug Look at Location Used for internal animation blueprint viewport for debugging. Real gameworld uses \"LookAtLocation\".If Tail Terrain Adaptive mode is enabled, then this is turned into a constant height reference point from which the line trace is fired. Debug Hand Locations Used for internal animation blueprint viewport debugging when using separate arms aiming/reaching. This does not influence the game world arm transforms","title":"Debugging Only"},{"location":"IK%20Solvers%20Info/footsolver/","text":"Dragon Foot Solver This solver modifies the legs of the character to adjust them to the terrain. It typically works complimentary with the spine solver. Table Parameter Description dragon input data Type the input bones used by the solver - pelvis,spine-start and feets IK Type Select foot ik type - two bone ik and one bone ik. 99.9% best to use the default two bone ik. One bone ik is only useful in case the animal has no knee bones, such as the infinity blade spiders. Trace Type Choose Trace type - Line,Sphere and Box. Trace Radius If trace type is box or sphere, its radius is controlled using the Trace Radius Location Interpolation Type Select the feet location interpolation method. Default uses the divisive location interpolation method, which provides optimal smoothness and speed of solving. Optionally can use the legacy method of interpolation. Rotation Interpolation Type Select the feet rotation interpolation method. Default uses the divisive location interpolation method, which provides optimal smoothness and speed of solving. Optionally can use the legacy method of interpolation. Automatic leg Make Parameter to choose between automatic feet bone detection or manual method. If enabled, solvers only uses the feet bones, and automatically assumes the next 2 parent bones as knees and thighs. If disabled, solvers uses the feet bones, knee bones and thigh bones typed in the feet array. If disabled, all bones need to be valid. Any invalid bones will not activate the ik. Very useful to keep it disabled on DAZ rigs and certain animal characters, where the thigh-knee-foot are not in a straight linear hierarchy. Use (optional ref pose) as reference for foot rotation ? If enabled, the rotation of the feet will be relative to its current animation. If disabled, the absolute reference rotation of the feet will be used instead, ensuring always aligned feets. Enable Solver Toggle this parameter to turn on/off ik. Example use case : Disable it when character is jumping or flying in the air. Shift Speed The transistion speed between solve and unsolve state of the leg ik (eg:- when character jumps and falls back to ground). Lower values means slower but smoother transition. Feet Position Interpolation Speed Controls the feet interpolation location speed. Lower values means smoother but slower results. Is ignored if \"Ignore location lerping\" is enabled. Feet Rotation Interpolation Speed Controls the feet interpolation rotation speed. Trace_Channel Trace channel used by the solver traces. Recommended to create a new dedicated trace channel for the ik through project settings. Anti_Trace_Channel Channel used for the trace repelling anti-channel process. Trace Height above feet Line trace height above the feet bones. Too high values will cause legs to react to ceilings and trees. Too low values will cause ik to not work on extreme slopes and steps. Trace Height below feet Line trace height below the feet bones. Usually best kept 0. Too high values can lead to sticky IK which might be undesirable. Use Anti-Channel Functionality Use the anti-channel in the solving logic. Use meshes with the anti-channel set to \"block\" to repel the traces from touching ceilings and closed spaces. Also useful when under stairs or narrow multi-storied buildings. Cover the ceilings and under stairs with anti-channel blocked meshes. Ignore Rotation Lerping Enable this to completely bypass rotation interpolation and use default values! Ignore Location Lerping nable this to completely bypass location interpolation and use default values! Should Solving Rotate Feet ? Disable this to ignore feet rotaion and use default animated rotation. Display Line Trace ? Enable this to render the line traces in the animgraph viewport. Enable Foot Pitch Disable this to zero out the pitch of the feet. Enable Foot Roll Disable this to zero out the roll of the feet. Character Up Direction Vector (Local space) The up direction vector of the character in component space. 99% cases, this should not be altered. Only needed to alter on characters that do not follow the standard unreal character orientations. (optional) Foot x Height offset Extra feet height offsets that can be altered during gameplay.","title":"Dragon Foot Solver"},{"location":"IK%20Solvers%20Info/footsolver/#dragon-foot-solver","text":"This solver modifies the legs of the character to adjust them to the terrain. It typically works complimentary with the spine solver.","title":"Dragon Foot Solver"},{"location":"IK%20Solvers%20Info/footsolver/#table","text":"Parameter Description dragon input data Type the input bones used by the solver - pelvis,spine-start and feets IK Type Select foot ik type - two bone ik and one bone ik. 99.9% best to use the default two bone ik. One bone ik is only useful in case the animal has no knee bones, such as the infinity blade spiders. Trace Type Choose Trace type - Line,Sphere and Box. Trace Radius If trace type is box or sphere, its radius is controlled using the Trace Radius Location Interpolation Type Select the feet location interpolation method. Default uses the divisive location interpolation method, which provides optimal smoothness and speed of solving. Optionally can use the legacy method of interpolation. Rotation Interpolation Type Select the feet rotation interpolation method. Default uses the divisive location interpolation method, which provides optimal smoothness and speed of solving. Optionally can use the legacy method of interpolation. Automatic leg Make Parameter to choose between automatic feet bone detection or manual method. If enabled, solvers only uses the feet bones, and automatically assumes the next 2 parent bones as knees and thighs. If disabled, solvers uses the feet bones, knee bones and thigh bones typed in the feet array. If disabled, all bones need to be valid. Any invalid bones will not activate the ik. Very useful to keep it disabled on DAZ rigs and certain animal characters, where the thigh-knee-foot are not in a straight linear hierarchy. Use (optional ref pose) as reference for foot rotation ? If enabled, the rotation of the feet will be relative to its current animation. If disabled, the absolute reference rotation of the feet will be used instead, ensuring always aligned feets. Enable Solver Toggle this parameter to turn on/off ik. Example use case : Disable it when character is jumping or flying in the air. Shift Speed The transistion speed between solve and unsolve state of the leg ik (eg:- when character jumps and falls back to ground). Lower values means slower but smoother transition. Feet Position Interpolation Speed Controls the feet interpolation location speed. Lower values means smoother but slower results. Is ignored if \"Ignore location lerping\" is enabled. Feet Rotation Interpolation Speed Controls the feet interpolation rotation speed. Trace_Channel Trace channel used by the solver traces. Recommended to create a new dedicated trace channel for the ik through project settings. Anti_Trace_Channel Channel used for the trace repelling anti-channel process. Trace Height above feet Line trace height above the feet bones. Too high values will cause legs to react to ceilings and trees. Too low values will cause ik to not work on extreme slopes and steps. Trace Height below feet Line trace height below the feet bones. Usually best kept 0. Too high values can lead to sticky IK which might be undesirable. Use Anti-Channel Functionality Use the anti-channel in the solving logic. Use meshes with the anti-channel set to \"block\" to repel the traces from touching ceilings and closed spaces. Also useful when under stairs or narrow multi-storied buildings. Cover the ceilings and under stairs with anti-channel blocked meshes. Ignore Rotation Lerping Enable this to completely bypass rotation interpolation and use default values! Ignore Location Lerping nable this to completely bypass location interpolation and use default values! Should Solving Rotate Feet ? Disable this to ignore feet rotaion and use default animated rotation. Display Line Trace ? Enable this to render the line traces in the animgraph viewport. Enable Foot Pitch Disable this to zero out the pitch of the feet. Enable Foot Roll Disable this to zero out the roll of the feet. Character Up Direction Vector (Local space) The up direction vector of the character in component space. 99% cases, this should not be altered. Only needed to alter on characters that do not follow the standard unreal character orientations. (optional) Foot x Height offset Extra feet height offsets that can be altered during gameplay.","title":"Table"},{"location":"IK%20Solvers%20Info/spinesolver/","text":"Dragon Spine Solver This solver modifies the body to adjust itself to the terrain. It does not modify the feet positions on its own, as that is handled by the Dragon Foot Solver. Table Parameter Description dragon input data Type the input bones used by the solver - pelvis,spine-start and feets Precision Tolerance for final tip location delta from EffectorLocation MaximumPitch Maximum spine rotation in pitch axis MaximumRoll Maximum spine rotation in roll axis MaxIterations Maximum number of iterations allowed. Alpha Alpha of the entire solver. 0 means no solving and 1 means maximum solving. Shift Speed The transistion speed between solve and unsolve state (eg:- when character jumps and falls back to ground). Lower values means slower but smoother transition. Trace_Channel Trace channel used by the solver traces. Recommended to create a new dedicated trace channel for the ik through project settings. Anti Trace Channel The repelling trace channel useful for handling close space areas. Trace_Radius If trace type is box or sphere, its radius is controlled using the Trace Radius LOD Threshold Max LOD that this node is allowed to run Extra Dip Multiplier If your character isn't dipping enough to touch the ground during slopes, slightly increase this value. Only handles dipping based on the pairs of feet and the difference between their respective trace hit location. Will not dip on flat surfaces. Rotate and move bone around terrain ? Enable this to rotate the pelvis and chest is perfect perpendicular fashion. Good for general purpose, but can cause extreme rotation and translations in wild,sharp and uneven surfaces. Recommended to experiment between this enabled and disabled. Ignore Lerping Disable both location and rotation interpolation Trace Downward Height Line trace height below the spines/feets Trace Upward Height Line trace height above the spines/feets Alternate Cross Radius This is the spacing width of the 4 trace lines arranged in a cross pattern, around both pelvis and chest bones. Ensure the spacing radius is tweaked to the spacing of the feet. This is used for important subtle calculations, such as detecting slopes/flat surfaces. Used for rotation calculation if \"Alternate cross based rotation\" is enabled. Maximum Feet-Terrain Fail Distance Maximum distance from feet to terrain to allow the solving to happen. Higher value makes the ik to solve even on terrains far below the character Minimum Terrain-Capsule Activation Distance The minimum distance between feet and terrain to allow solving to happen. Increase this value if ik is turning off easilly on slopes. Too high of a value can make the ik to \"stick\" to the ground more, which can be undesirable. Recommended to tweak this value until it feels right Display LineTracing Enable this to render the traces in the animgraph viewports. Use Anti-Channel Functionality Use the anti-channel in the solving logic. Use meshes with the anti-channel set to \"block\" to repel the traces from touching ceilings and closed spaces. Also useful when under stairs or narrow multi-storied buildings. Cover the ceilings and under stairs with anti-channel blocked meshes. Extra dip When going up slopes Extra dip when pelvis is on an upward slope Extra dip When going down slopes Extra dip when pelvis is on a downward slope Reverse Fabrik Enable this to prioritise chest over the pelvis. The normal fabrik mode prioritises the pelvis transformation location when on extreme terrains. The reverse fabrik mode ensures chest is given priority. Calculation Relative To Ref Pose Should solver calculation be based on the default reference pose or the current animated pose ? [Pelvis & Chest] Z Offset Optional additional Z offset for the [Pelvis & Chest] Maximum Dip Height - [Pelvis & Chest] Maximum height the [Pelvis & Chest] can dip below the base pose. Lower values means [Pelvis & Chest] will dip less. For biped (2 feet) characters, this is only used. Differentiate between hard flat and rotated slopes [Pelvis & Chest] Enable this to make the trace lines differentiate between flat planar terrains and organic terrains Rotation alpha between end points This is the rotation alpha value of all the bones between the pelvis and chest. 1 value means full solved state, while 0 means 0 solved state. Automatic Fabrik Selection (Development) An experimental feature, where the solver automatically switch between fabrik and reverse fabrik mode depending on the slope. Body Location Lerp Speed Controls the location interpolation speed of the body. Higher values means faster interpolation. Slower values means slower but also smoother interpolation. Body Rotation Lerp Speed Controls the rotation interpolation speed of the body. Higher values means faster interpolation. Slower values means slower but also smoother interpolation. Chest Influence Alpha The location alpha value for the chest. 1 means full solving of the chest transformation. 0 means no solving of the chest transformation. Chest rotation still works regardless. [Pelvis & Chest] Forward Rotation Intensity Controls the intensity of the [Pelvis & Chest] forward rotation with respect to the slopes. 0 means no rotation applied. [Pelvis & Chest] Sideward Rotation Intensity Controls the intensity of the [Pelvis & Chest] sideward rotation with respect to the slopes. 0 means no rotation applied. [Pelvis & Chest] Post Rotation Offset Fixed rotation offsets to be applied on [Pelvis & Chest] Use Alternate Cross-Based [Pelvis & Chest] Rotation Enable this to use the 4 cross-based trace lines to determine the rotation of the pelvis instead of the default normal method Is spine always fully extended ? Enable this to allow spine to bend and modify at a fixed maximum length Fully extended ratio The ratio length the spine stretches if full extension is enabled. Non extended ratio The minimum ratio length the spine can stretch upto if full extension is disabled Extension Switch Speed The speed of the spine extension/compression during slopes Enable Solver Enable/Disable the solver Force Activation This will force the ik to work at all times. Animals will not be able to jump if this is enabled. Only recommended for testing and debugging purposes. accurate feet placement Enable this to use proper accurate feet placement logic. But it might provide jumpy nature for certain quadrupeds like horses when they are moving on slopes. Recommended use case is to disable this when a quadruped animal is moving, but enable it when it is idle. use crosshair trace also for fail distance Enable this to use the 4 cross based traces to turn off the ik, if any of the trace hits are too far. Is Biped Character ? Enable this to only solve the pelvis bone, while the remaining bones remain unchanged. Recommended to enable it for bipeds like humans and raptors. Also recommended for single root spiders. Overall PostSolved Offset Additional offset parameters to the overall bones Up Direction Vector The up direction vector of the character in component space. 99% cases, this should not be altered. Forward Direction Vector The forward direction vector of the character in component space. 99% cases, this should not be altered. Flip forward and right rotation If character is rigged and animated in the opposite direction to the standard unreal forward/right directions, then enable this. 99% cases, this should not be altered. Solver Reference Pose Whether to use the reference pose or animated pose for calculations. Strict Spine-Feet pair finding Automatically correct the spine and feet bone pairing with respect to the typed bone names in the input settings. If correct bone names are typed, it makes no difference in the end. Is it a snake ? Enable snake mode. If character is either a snake or a worm, enable this. Can also be turned on for biped characters sleeping or proning on the ground. Snake Joint Speed (If snake true) Spine interpolation speed if snake mode is enabled.","title":"Dragon Spine Solver"},{"location":"IK%20Solvers%20Info/spinesolver/#dragon-spine-solver","text":"This solver modifies the body to adjust itself to the terrain. It does not modify the feet positions on its own, as that is handled by the Dragon Foot Solver.","title":"Dragon Spine Solver"},{"location":"IK%20Solvers%20Info/spinesolver/#table","text":"Parameter Description dragon input data Type the input bones used by the solver - pelvis,spine-start and feets Precision Tolerance for final tip location delta from EffectorLocation MaximumPitch Maximum spine rotation in pitch axis MaximumRoll Maximum spine rotation in roll axis MaxIterations Maximum number of iterations allowed. Alpha Alpha of the entire solver. 0 means no solving and 1 means maximum solving. Shift Speed The transistion speed between solve and unsolve state (eg:- when character jumps and falls back to ground). Lower values means slower but smoother transition. Trace_Channel Trace channel used by the solver traces. Recommended to create a new dedicated trace channel for the ik through project settings. Anti Trace Channel The repelling trace channel useful for handling close space areas. Trace_Radius If trace type is box or sphere, its radius is controlled using the Trace Radius LOD Threshold Max LOD that this node is allowed to run Extra Dip Multiplier If your character isn't dipping enough to touch the ground during slopes, slightly increase this value. Only handles dipping based on the pairs of feet and the difference between their respective trace hit location. Will not dip on flat surfaces. Rotate and move bone around terrain ? Enable this to rotate the pelvis and chest is perfect perpendicular fashion. Good for general purpose, but can cause extreme rotation and translations in wild,sharp and uneven surfaces. Recommended to experiment between this enabled and disabled. Ignore Lerping Disable both location and rotation interpolation Trace Downward Height Line trace height below the spines/feets Trace Upward Height Line trace height above the spines/feets Alternate Cross Radius This is the spacing width of the 4 trace lines arranged in a cross pattern, around both pelvis and chest bones. Ensure the spacing radius is tweaked to the spacing of the feet. This is used for important subtle calculations, such as detecting slopes/flat surfaces. Used for rotation calculation if \"Alternate cross based rotation\" is enabled. Maximum Feet-Terrain Fail Distance Maximum distance from feet to terrain to allow the solving to happen. Higher value makes the ik to solve even on terrains far below the character Minimum Terrain-Capsule Activation Distance The minimum distance between feet and terrain to allow solving to happen. Increase this value if ik is turning off easilly on slopes. Too high of a value can make the ik to \"stick\" to the ground more, which can be undesirable. Recommended to tweak this value until it feels right Display LineTracing Enable this to render the traces in the animgraph viewports. Use Anti-Channel Functionality Use the anti-channel in the solving logic. Use meshes with the anti-channel set to \"block\" to repel the traces from touching ceilings and closed spaces. Also useful when under stairs or narrow multi-storied buildings. Cover the ceilings and under stairs with anti-channel blocked meshes. Extra dip When going up slopes Extra dip when pelvis is on an upward slope Extra dip When going down slopes Extra dip when pelvis is on a downward slope Reverse Fabrik Enable this to prioritise chest over the pelvis. The normal fabrik mode prioritises the pelvis transformation location when on extreme terrains. The reverse fabrik mode ensures chest is given priority. Calculation Relative To Ref Pose Should solver calculation be based on the default reference pose or the current animated pose ? [Pelvis & Chest] Z Offset Optional additional Z offset for the [Pelvis & Chest] Maximum Dip Height - [Pelvis & Chest] Maximum height the [Pelvis & Chest] can dip below the base pose. Lower values means [Pelvis & Chest] will dip less. For biped (2 feet) characters, this is only used. Differentiate between hard flat and rotated slopes [Pelvis & Chest] Enable this to make the trace lines differentiate between flat planar terrains and organic terrains Rotation alpha between end points This is the rotation alpha value of all the bones between the pelvis and chest. 1 value means full solved state, while 0 means 0 solved state. Automatic Fabrik Selection (Development) An experimental feature, where the solver automatically switch between fabrik and reverse fabrik mode depending on the slope. Body Location Lerp Speed Controls the location interpolation speed of the body. Higher values means faster interpolation. Slower values means slower but also smoother interpolation. Body Rotation Lerp Speed Controls the rotation interpolation speed of the body. Higher values means faster interpolation. Slower values means slower but also smoother interpolation. Chest Influence Alpha The location alpha value for the chest. 1 means full solving of the chest transformation. 0 means no solving of the chest transformation. Chest rotation still works regardless. [Pelvis & Chest] Forward Rotation Intensity Controls the intensity of the [Pelvis & Chest] forward rotation with respect to the slopes. 0 means no rotation applied. [Pelvis & Chest] Sideward Rotation Intensity Controls the intensity of the [Pelvis & Chest] sideward rotation with respect to the slopes. 0 means no rotation applied. [Pelvis & Chest] Post Rotation Offset Fixed rotation offsets to be applied on [Pelvis & Chest] Use Alternate Cross-Based [Pelvis & Chest] Rotation Enable this to use the 4 cross-based trace lines to determine the rotation of the pelvis instead of the default normal method Is spine always fully extended ? Enable this to allow spine to bend and modify at a fixed maximum length Fully extended ratio The ratio length the spine stretches if full extension is enabled. Non extended ratio The minimum ratio length the spine can stretch upto if full extension is disabled Extension Switch Speed The speed of the spine extension/compression during slopes Enable Solver Enable/Disable the solver Force Activation This will force the ik to work at all times. Animals will not be able to jump if this is enabled. Only recommended for testing and debugging purposes. accurate feet placement Enable this to use proper accurate feet placement logic. But it might provide jumpy nature for certain quadrupeds like horses when they are moving on slopes. Recommended use case is to disable this when a quadruped animal is moving, but enable it when it is idle. use crosshair trace also for fail distance Enable this to use the 4 cross based traces to turn off the ik, if any of the trace hits are too far. Is Biped Character ? Enable this to only solve the pelvis bone, while the remaining bones remain unchanged. Recommended to enable it for bipeds like humans and raptors. Also recommended for single root spiders. Overall PostSolved Offset Additional offset parameters to the overall bones Up Direction Vector The up direction vector of the character in component space. 99% cases, this should not be altered. Forward Direction Vector The forward direction vector of the character in component space. 99% cases, this should not be altered. Flip forward and right rotation If character is rigged and animated in the opposite direction to the standard unreal forward/right directions, then enable this. 99% cases, this should not be altered. Solver Reference Pose Whether to use the reference pose or animated pose for calculations. Strict Spine-Feet pair finding Automatically correct the spine and feet bone pairing with respect to the typed bone names in the input settings. If correct bone names are typed, it makes no difference in the end. Is it a snake ? Enable snake mode. If character is either a snake or a worm, enable this. Can also be turned on for biped characters sleeping or proning on the ground. Snake Joint Speed (If snake true) Spine interpolation speed if snake mode is enabled.","title":"Table"},{"location":"Tips%20%26%20Tricks/UsefulTips/","text":"Useful tips and solutions to common problems Create a custom trace channel Create a custom trace channel that can be used by your IK. Depending on the project type, you can either set the new trace channel to ignore or block by default. The IK trace channel of your terrains and platforms need to be set to block to let the IK detect them. Check if line traces are drawn in the animation blueprint viewport If your character feels like its not reacting to the terrains, check the animation blueprint viewport. Click on any of your solvers and see if the red lines and/or other widgets are showing up in the viewport. If nothing is showing up, then there is atleast one badly typed bone name. Tweak knee direction offsets to legs bending in bad directions For characters like horses which has straight vertical leg poses, the direction of the bending of legs can appear random when on slopes. To mitigate this, move the blue pole vectors of the foot solver in the animation graph viewport. The bending is directed by the direction of these poles. You can either drag them using the mouse, or type the values directly inside the feet array's \"knee direction offset\" parameter.","title":"Super Useful Tips"},{"location":"Tips%20%26%20Tricks/UsefulTips/#useful-tips-and-solutions-to-common-problems","text":"","title":"Useful tips and solutions to common problems"},{"location":"Tips%20%26%20Tricks/UsefulTips/#create-a-custom-trace-channel","text":"Create a custom trace channel that can be used by your IK. Depending on the project type, you can either set the new trace channel to ignore or block by default. The IK trace channel of your terrains and platforms need to be set to block to let the IK detect them.","title":"Create a custom trace channel"},{"location":"Tips%20%26%20Tricks/UsefulTips/#check-if-line-traces-are-drawn-in-the-animation-blueprint-viewport","text":"If your character feels like its not reacting to the terrains, check the animation blueprint viewport. Click on any of your solvers and see if the red lines and/or other widgets are showing up in the viewport. If nothing is showing up, then there is atleast one badly typed bone name.","title":"Check if line traces are drawn in the animation blueprint viewport"},{"location":"Tips%20%26%20Tricks/UsefulTips/#tweak-knee-direction-offsets-to-legs-bending-in-bad-directions","text":"For characters like horses which has straight vertical leg poses, the direction of the bending of legs can appear random when on slopes. To mitigate this, move the blue pole vectors of the foot solver in the animation graph viewport. The bending is directed by the direction of these poles. You can either drag them using the mouse, or type the values directly inside the feet array's \"knee direction offset\" parameter.","title":"Tweak knee direction offsets to legs bending in bad directions"}]}